!split
======= Git =======
[From Wikipedia] Git is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers who are collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different computers).

Let's try to be more accessible. Git is a computer program/tool to save and download files on a hosting server (e.g. GitHub and GitLab).

!split
===== A distributed version control system =====
Git facilitates users to track the various versions of files. It is not a necessary tool, but it can be very very helpful. Generally, the time spent to learn its syntax is well paid off (do you remember to save some file like manuscript_draft_v4.02_final_definitive_forreal_lastcomments_editedbyER_submittedVersion_revised_wrongversiontokeep.doc? Exactly).   
It permits to save and share the intermediate stages of a work in progress (which software is complete and always up to date?) in an accessible, consistent and structured way, allowing an effective version tracking. It allows retrieval of previous working versions, limiting the risk to overwrite useful files.

!split
===== Whas is git actually for =====
The tool is particularly useful for programmers working in teams or in projects whose outcomes can be used by others.
Imagine that you and a colleague have a joint task, where each of you has to develop its own small part of a computer program. Git would help you to co-develop the code, test its functions and the compatibility of the various code sections. 
A long list of further possibilities became possible by git. Different software integration on development platforms, based on git, will help you to develop and co-develop your code. Furthermore, the platform GitLab and GitHub have a large set of functionalities to further support code documentation and public releases. Your files can thus be disclosed to the public, becoming a great integration of your CV, showing what you are able to do in an open and accessible way. 

Git allowed the generation of entire communities, connecting developers around the globe on projects of common interest. Linux and various AI software are current examples of the success supported by git.


!split
===== Why should I care? =====
As the open libraries are exploding in numbers, you might need some criteria to assert the reliability of a project.

Unit test driven development! 

That is taking fully advantage of python object oriented structure.






 
